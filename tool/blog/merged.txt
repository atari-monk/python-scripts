Merged Files
=============

__init__.py
--------------------------------------------------------------------------------


add_target.py
--------------------------------------------------------------------------------
from plumbum import cli
from tool.blog.core.config_crud import ConfigCRUD


class AddTarget(cli.Application):
    
    def main(self, target_name: str = None, target_path: str = None):
        config = ConfigCRUD.load()
        
        if target_name is None:
            while True:
                target_name = input("Enter target name: ").strip()
                if target_name:
                    break
                print("Error: Target name cannot be empty")
                
        if target_name in config.targets:
            print(f"Target '{target_name}' already exists")
            return 1
            
        if target_path is None:
            while True:
                target_path = input(f"Enter path for target '{target_name}': ").strip()
                if target_path:
                    break
                print("Error: Path cannot be empty")
                
        config.targets[target_name] = target_path
        config.last_used_target = target_name
        ConfigCRUD.save(config)
        
        print(f"Added target '{target_name}' with path '{target_path}'")
        return 0


cli.py
--------------------------------------------------------------------------------
from plumbum import cli


class BlogCLI(cli.Application):
    
    def main(self):
        if not self.nested_command:
            print("No command specified")
            self.help()
            return 1
        
        
def main():
    from tool.blog.add_target import AddTarget
    from tool.blog.print_config import PrintConfig
    BlogCLI.subcommand("add-target")(AddTarget)
    BlogCLI.subcommand("print-config")(PrintConfig)
    BlogCLI.run()


if __name__ == "__main__":
    main()

core\__init__.py
--------------------------------------------------------------------------------


core\config.py
--------------------------------------------------------------------------------
from dataclasses import dataclass, field
from typing import Dict, Optional


@dataclass
class Config:
    targets: Dict[str, str] = field(default_factory=lambda: {})
    last_used_target: Optional[str] = None

core\config_crud.py
--------------------------------------------------------------------------------
from dataclasses import asdict
from pathlib import Path
import json
from tool.blog.core.config import Config


class ConfigCRUD:
    @staticmethod
    def get_config_path() -> Path:
        return Path(r"C:\atari-monk\code\apps-data-store\blog_config.json")

    @classmethod
    def load(cls) -> Config:
        config_path = cls.get_config_path()
        try:
            if config_path.exists() and config_path.stat().st_size > 0:
                with open(config_path, "r") as f:
                    data = json.load(f)
                    if "targets" in data:
                        return Config(
                            targets=data["targets"],
                            last_used_target=data.get("last_used_target")
                        )
                    elif "repos" in data:
                        return Config(targets=data["repos"])
                    else:
                        return Config(targets={"blog": data.get("repo_path", "")})
        except (json.JSONDecodeError, AttributeError):
            print("Warning: Config file corrupted, creating new one")
        return Config()

    @classmethod
    def save(cls, config: Config) -> None:
        with open(cls.get_config_path(), "w") as f:
            json.dump(asdict(config), f, indent=2)

print_config.py
--------------------------------------------------------------------------------
import json
from plumbum import cli
from tool.blog.core.config_crud import ConfigCRUD


class PrintConfig(cli.Application):
    
    def main(self):
        config = ConfigCRUD.load()
        print(json.dumps({
            "targets": config.targets,
            "last_used_target": config.last_used_target
        }, indent=2))
        return 0





Merged 7 files
